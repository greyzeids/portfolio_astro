---
import Layout from '../layouts/Layout.astro';
import '../styles/game_hud.css';
---

<Layout title="Tech Stack - Miquel Carnot" bodyClass="game-body">
    <div id="tech-stack-experience">
        <!-- Canvas dedicado para TechStackEffect -->
        <canvas id="tech-canvas"></canvas>
        
        <!-- Mensaje de espera -->
        <div id="waiting-message">
            <h2>Tech Stack</h2>
            <p>Los logos de tecnolog√≠as aparecer√°n cuando el mecha llegue...</p>
        </div>
    </div>
</Layout>

<style>
    #tech-stack-experience {
        position: relative;
        width: 100vw;
        height: 100vh;
        overflow: hidden;
    }

    #tech-canvas {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        z-index: 1;
        background: #000033;
    }

    #waiting-message {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        text-align: center;
        color: #00d4ff;
        z-index: 10;
        font-family: 'Courier New', monospace;
    }

    #waiting-message h2 {
        font-size: 2.5rem;
        margin-bottom: 1rem;
        text-shadow: 0 0 10px #00d4ff;
    }

    #waiting-message p {
        font-size: 1.2rem;
        opacity: 0.8;
    }
</style>

<script>
    import { TechStackEffect } from '../scripts/TechStackEffect.js';
    import * as THREE from 'three';
    import * as CANNON from 'cannon-es';

    // Variables globales para la experiencia
    let scene: THREE.Scene;
    let camera: THREE.PerspectiveCamera;
    let renderer: THREE.WebGLRenderer;
    let world: CANNON.World;
    let techStackEffect: TechStackEffect;
    let animationId: number;

    // Elementos del DOM
    const canvas = document.getElementById('tech-canvas') as HTMLCanvasElement;

    // Inicializar la experiencia
    async function initTechStackExperience() {
        console.log('üöÄ Inicializando experiencia Tech Stack...');

        try {
            // Configurar Three.js
            scene = new THREE.Scene();
            camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
            camera.position.z = 10;

            // Configurar renderer
            renderer = new THREE.WebGLRenderer({ 
                canvas, 
                antialias: true,
                alpha: false
            });
            renderer.setSize(window.innerWidth, window.innerHeight);
            renderer.setClearColor(0x000033);
            renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));

            // Configurar Cannon.js
            world = new CANNON.World();
            world.gravity.set(0, 0, 0);

            console.log('‚úÖ Three.js y Cannon.js configurados');

            // Crear efecto de tech stack
            techStackEffect = new TechStackEffect(scene, world, camera, renderer);
            (window as any).techStackEffect = techStackEffect;

            // Configurar URLs personalizadas para los logos de tecnolog√≠a
            techStackEffect.setTechLogoUrls([
                "/models/tech-logos/react.glb",
                "/models/tech-logos/html5.glb",
                "/models/tech-logos/css3.glb",
            ]);

            console.log('‚úÖ TechStackEffect creado');

            // NO activar el modo tech logos inmediatamente - esperar a la animaci√≥n
            // await techStackEffect.switchToTechLogos();
            console.log('‚úÖ TechStackEffect listo para animaci√≥n');

            // Funci√≥n para mostrar los logos cuando el mecha llegue
            (window as any).showTechLogos = async () => {
                const waitingMessage = document.getElementById('waiting-message');
                if (waitingMessage) {
                    waitingMessage.style.display = 'none';
                }
                await techStackEffect.preloadTechLogos();
                techStackEffect.spawnTechLogosAround({ x: 0, y: 0, z: 0 }, 4);
            };

            // Iniciar animaci√≥n
            animate();

        } catch (error) {
            console.error('‚ùå Error inicializando Tech Stack:', error);
        }
    }

    function animate() {
        animationId = requestAnimationFrame(animate);

        try {
            const deltaTime = 1/60; // Aproximaci√≥n simple
            world.step(deltaTime);
            techStackEffect.update(deltaTime);
            renderer.render(scene, camera);
        } catch (error) {
            console.error('‚ùå Error en animaci√≥n:', error);
            cancelAnimationFrame(animationId);
        }
    }

    // Event listeners
    window.addEventListener('resize', () => {
        camera.aspect = window.innerWidth / window.innerHeight;
        camera.updateProjectionMatrix();
        renderer.setSize(window.innerWidth, window.innerHeight);
    });

    // Inicializar cuando el DOM est√© listo
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', initTechStackExperience);
    } else {
        initTechStackExperience();
    }

    // Cleanup al salir de la p√°gina
    window.addEventListener('beforeunload', () => {
        if (animationId) {
            cancelAnimationFrame(animationId);
        }
        if (techStackEffect) {
            techStackEffect.dispose();
        }
    });
</script> 