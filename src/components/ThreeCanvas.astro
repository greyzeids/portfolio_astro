---
import '../styles/game_hud.css';
---

<div id="three-loading" class="three-loading">
    <div class="loading-spinner"></div>
    <div class="loading-text">Cargando experiencia 3D...</div>
    <div class="loading-progress">
        <div class="progress-bar"></div>
    </div>
</div>

<canvas id="bg" style="display: none;"></canvas>
<div id="crosshair-container" style="display: none;">
    <div class="crosshair-dot"></div>
    <div class="crosshair-bracket top-left"></div>
    <div class="crosshair-bracket top-right"></div>
    <div class="crosshair-bracket bottom-left"></div>
    <div class="crosshair-bracket bottom-right"></div>
</div>

<div id="game-hud" style="display: none;">

    <div class="gauge-container left">
        <div class="vertical-gauge">
            <div class="gauge-track">
                <div id="speed-indicator" class="gauge-indicator"></div>
            </div>
            <div class="gauge-labels">
                <span>250</span><span>200</span><span>150</span><span>100</span><span>50</span><span>0</span>
            </div>
        </div>
        <div class="gauge-title">SPEED</div>
    </div>

    <div class="gauge-container right">
        <div class="gauge-title">ALTITUDE</div>
        <div class="vertical-gauge">
             <div class="gauge-track">
                <div id="altitude-indicator" class="gauge-indicator"></div>
            </div>
            <div class="gauge-labels">
                <span>100</span><span>50</span><span>0</span><span>-50</span><span>-100</span>
            </div>
        </div>
    </div>
    <canvas id="compass-canvas"></canvas>
    <div id="compass-frame"></div>
</div>

<style>
.three-loading {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: linear-gradient(135deg, #0c0c0c 0%, #1a1a2e 50%, #16213e 100%);
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    z-index: 1000;
    color: #00d4ff;
    font-family: 'Courier New', monospace;
}

.loading-spinner {
    width: 50px;
    height: 50px;
    border: 3px solid rgba(0, 212, 255, 0.3);
    border-top: 3px solid #00d4ff;
    border-radius: 50%;
    animation: spin 1s linear infinite;
    margin-bottom: 20px;
}

.loading-text {
    font-size: 18px;
    margin-bottom: 15px;
    text-shadow: 0 0 10px #00d4ff;
}

.loading-progress {
    width: 200px;
    height: 4px;
    background: rgba(0, 212, 255, 0.2);
    border-radius: 2px;
    overflow: hidden;
}

.progress-bar {
    height: 100%;
    background: linear-gradient(90deg, #00d4ff, #64e6ff);
    width: 0%;
    transition: width 0.3s ease;
    border-radius: 2px;
}

@keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
}

.three-loading.hidden {
    opacity: 0;
    pointer-events: none;
    transition: opacity 0.5s ease;
}
</style>

<script>
    // --- Lazy Loading Manager para Three.js ---
    class ThreeJSLoader {
        private loadingElement: HTMLElement | null;
        private canvas: HTMLCanvasElement | null;
        private crosshair: HTMLElement | null;
        private gameHud: HTMLElement | null;
        private progressBar: HTMLElement | null;
        private loadingText: HTMLElement | null;

        // Almacena la funci√≥n de inicializaci√≥n de la experiencia 3D
        private initExperienceFunction: (() => Promise<void>) | null = null;

        constructor() {
            this.loadingElement = document.getElementById('three-loading');
            this.canvas = document.getElementById('bg') as HTMLCanvasElement;
            this.crosshair = document.getElementById('crosshair-container');
            this.gameHud = document.getElementById('game-hud');
            this.progressBar = document.querySelector('.progress-bar');
            this.loadingText = document.querySelector('.loading-text');
        }

        // Inicializar el lazy loading
        async init(): Promise<void> {
            console.log('üöÄ Iniciando lazy loading de Three.js...');
            
            // Mostrar indicador de carga
            this.showLoading();
            
            try {
                this.updateProgress(10, 'Preparando entorno 3D...');
                
                // Cargar el m√≥dulo que contiene Three.js y/o la l√≥gica de la experiencia
                const module = await this.importThreeExperienceModule();
                
                this.updateProgress(50, 'Inicializando componentes 3D...');

                // Intentar encontrar y ejecutar la funci√≥n de inicializaci√≥n
                if (module && typeof module.default === 'function') {
                    this.initExperienceFunction = module.default;
                    console.log('‚úÖ Funci√≥n de inicializaci√≥n por defecto encontrada y lista para ejecutar.');
                } else if (module && typeof module.initThreeExperience === 'function') {
                    this.initExperienceFunction = module.initThreeExperience;
                    console.log('‚úÖ Funci√≥n de inicializaci√≥n "initThreeExperience" encontrada y lista para ejecutar.');
                } else {
                    console.warn('‚ö†Ô∏è No se encontr√≥ una funci√≥n de inicializaci√≥n "default" o "initThreeExperience" exportada. Asumiendo que three-experience.js se inicializa autom√°ticamente al importarse.');
                    this.initExperienceFunction = async () => {}; // Funci√≥n vac√≠a para no romper el flujo
                }

                if (this.initExperienceFunction) {
                    this.updateProgress(75, 'Ejecutando experiencia 3D...');
                    await this.initExperienceFunction();
                    console.log('‚úÖ Experiencia 3D ejecutada exitosamente.');
                }
                
                // Finalizar carga visual
                this.updateProgress(100, '¬°Carga completa! Entrando en el mundo 3D...');
                await this.delay(500); // Peque√±o retraso para que el usuario vea el 100%
                
                // Ocultar loading y mostrar experiencia
                this.hideLoading();
                this.showExperience();
                
                console.log('üéâ Experiencia 3D visible.');
                
            } catch (error) {
                console.error('‚ùå Error cr√≠tico durante la carga o inicializaci√≥n de Three.js:', error);
                
                // --- INICIO DE LA CORRECCI√ìN para 'error' is of type 'unknown' ---
                let errorMessage = 'Desconocido';
                if (error instanceof Error) {
                    errorMessage = error.message;
                } else if (typeof error === 'string') {
                    errorMessage = error;
                }
                // --- FIN DE LA CORRECCI√ìN ---

                this.showError(`Error al cargar la experiencia 3D: ${errorMessage}`);
            }
        }

        // Importar din√°micamente el m√≥dulo three-experience.js
        async importThreeExperienceModule(): Promise<any> {
            this.updateProgress(30, 'Cargando m√≥dulo de experiencia Three.js...');
            try {
                // Importaci√≥n din√°mica del m√≥dulo
                const module = await import('../scripts/three-experience.js');
                console.log('‚úÖ M√≥dulo three-experience.js importado con √©xito.');
                return module;
            } catch (error) {
                console.error('‚ùå Error al importar ../scripts/three-experience.js:', error);
                
                // --- INICIO DE LA CORRECCI√ìN para 'error' is of type 'unknown' ---
                let errorMessage = 'Verifica la ruta o el contenido del archivo';
                if (error instanceof Error) {
                    errorMessage = error.message;
                } else if (typeof error === 'string') {
                    errorMessage = error;
                }
                // --- FIN DE LA CORRECCI√ìN ---

                this.showError(`Fallo al cargar el m√≥dulo 3D: ${errorMessage}`);
                throw error; // Propagar el error para que init() lo capture
            }
        }

        // Mostrar indicador de carga
        showLoading() {
            if (this.loadingElement) {
                this.loadingElement.style.display = 'flex';
                this.loadingElement.classList.remove('hidden'); 
            }
        }

        // Ocultar indicador de carga
        hideLoading() {
            if (this.loadingElement) {
                this.loadingElement.classList.add('hidden');
                setTimeout(() => {
                    if (this.loadingElement) {
                        this.loadingElement.style.display = 'none';
                    }
                }, 500); 
            }
        }

        // Mostrar experiencia 3D
        showExperience(): void {
            if (this.canvas) this.canvas.style.display = 'block';
            if (this.crosshair) this.crosshair.style.display = 'block';
            if (this.gameHud) this.gameHud.style.display = 'block';
        }

        // Actualizar progreso de carga
        updateProgress(percentage: number, text: string): void {
            if (this.progressBar) {
                this.progressBar.style.width = `${percentage}%`;
            }
            if (this.loadingText) {
                this.loadingText.textContent = text;
            }
        }

        // Mostrar error en el indicador de carga
        showError(message: string): void {
            if (this.loadingText) {
                this.loadingText.textContent = message;
                this.loadingText.style.color = '#ff4444'; 
            }
            const spinner = document.querySelector('.loading-spinner');
            if (spinner) {
                (spinner as HTMLElement).style.display = 'none';
            }
        }

        // Utilidad para delays
        delay(ms: number): Promise<void> {
            return new Promise<void>(resolve => setTimeout(resolve, ms));
        }
    }

    // --- Inicializaci√≥n cuando el DOM est√© listo ---
    document.addEventListener('DOMContentLoaded', () => {
        (window as any).THREE_LAZY_LOADING = true;
        
        const threeLoader = new ThreeJSLoader();
        
        setTimeout(() => {
            threeLoader.init();
        }, 100);
    });
</script>